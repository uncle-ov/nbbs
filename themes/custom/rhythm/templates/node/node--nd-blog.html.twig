{#
/**
 * @file
 * Bartik's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>
  {% if teaser %}
    <div class="blog-item">
      <div class="blog-item-date">
          <span class="date-num">{{ node.getCreatedTime()|date('d') }}</span>{{ node.getCreatedTime()|date('M')|t }}
      </div>
      {{ title_prefix }}
      <!-- Post Title -->
      <h2 class="blog-item-title font-alt"><a href="{{ url }}">{{ label }}</a></h2>
      {{ title_suffix }}
      <!-- Author, Categories, Comments -->
      <div class="blog-item-data">
          <a href="#"><i class="fa fa-clock-o"></i> {{ node.getCreatedTime()|date('d') }} {{ node.getCreatedTime()|date('F')|t }} </a>
          <span class="separator">&nbsp;</span>
          <a href="#"><i class="fa fa-user"></i>{{ author_name }}</a>
          <span class="separator">&nbsp;</span>
          {% if content.field_blog_category %}
            <i class="fa fa-folder-open"></i>
            {{ content.field_blog_category }}
            <span class="separator">&nbsp;</span>
          {% endif %}
          <a href="#"><i class="fa fa-comments"></i> {{ comment_count }} {{ 'Comments'|t}}</a>
      </div>
      
      <!-- Text Intro -->
      <div class="blog-item-body">
          {{ content|without('field_blog_category', 'links') }}
      </div>
      
      <!-- Read More Link -->
      <div class="blog-item-foot">
          <a href="{{ url }}" class="btn btn-mod btn-round  btn-small">{{ 'Read More'|t }} <i class="fa fa-angle-right"></i></a>
      </div>
        
    </div>
  {% else %}
    <div class = "blog-item mb-80 mb-xs-40">
      <div class = "blog-item-body">
        <header>
          {{ title_prefix }}
          <h1 {{ title_attributes.addClass('node__title', 'mt-0', 'font-alt') }}>{{ content.field_second_title }}</h1>
          {{ title_suffix }}
          {% if display_submitted %}
            <div class="node__meta">
              {{ author_picture }}
              <span{{ author_attributes }}>
                {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
              </span>
              {{ metadata }}
            </div>
          {% endif %}
        </header>
        <div{{ content_attributes.addClass('node__content', 'clearfix') }}>
          <div class = "lead mt-0">
            {{ content.field_lead_text }}  
          </div>
          {{ content|without('field_lead_text', 'field_second_title', 'field_comments') }}
        </div>
      </div>
    </div>
    <div class = "mb-80 mb-xs-40">
      {{ content.field_comments}}
    </div>
    <div class="clearfix mt-40">
      <a href="{{ prev }}" class="blog-item-more left"><i class="fa fa-angle-left"></i>&nbsp;{{ 'Prev post'|t }}</a>
      <a href="{{ next }}" class="blog-item-more right">{{ 'Next post'|t }}&nbsp;<i class="fa fa-angle-right"></i></a>
    </div>
  {% endif %}
  
</article>

